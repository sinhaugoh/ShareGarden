# Generated by Django 3.2 on 2022-07-27 08:25

import core.models
import core.storage
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, storage=core.storage.OverwriteFileStorage(), upload_to=core.models.get_profile_image_path)),
                ('about', models.CharField(blank=True, max_length=500, null=True)),
                ('location', models.CharField(blank=True, max_length=500, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ItemPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('quantity', models.PositiveSmallIntegerField()),
                ('pick_up_information', models.TextField(max_length=256)),
                ('location', models.CharField(max_length=500)),
                ('characteristics', models.TextField(blank=True, max_length=500, null=True)),
                ('soil_type', models.CharField(choices=[('None', 'None'), ('Chalk', 'Chalk'), ('Clay', 'Clay'), ('Peat', 'Peat'), ('Loam', 'Loam'), ('Sandy soil', 'Sandy Soil')], default='None', max_length=20)),
                ('light_requirement', models.CharField(choices=[('None', 'None'), ('Full sun', 'Full Sun'), ('Partial shade', 'Partial Shade'), ('Shade', 'Shade')], default='None', max_length=20)),
                ('optimal_temperature', models.SmallIntegerField(blank=True, null=True)),
                ('category', models.CharField(choices=[('Giveaway', 'Giveaway'), ('Lend', 'Lend'), ('Request', 'Request')], max_length=20)),
                ('item_type', models.CharField(choices=[('Seed/Plant', 'Seed Or Plant'), ('Fertilizer', 'Fertilizer'), ('Gardening tool', 'Gardening Tool'), ('Pot', 'Pot')], max_length=20)),
                ('days_to_harvest', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('water_requirement', models.CharField(choices=[('None', 'None'), ('Low', 'Low'), ('Moderate', 'Moderate'), ('Medium', 'Medium'), ('High', 'High'), ('Intensive', 'Intensive')], default='None', max_length=20)),
                ('growing_tips', models.TextField(blank=True, max_length=500, null=True)),
                ('cover_image', models.ImageField(storage=core.storage.OverwriteFileStorage(), upload_to=core.models.get_item_cover_image_path)),
                ('is_active', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ItemPostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=core.models.get_item_image_path)),
                ('item_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.itempost')),
            ],
        ),
    ]
